cmake_minimum_required(VERSION 3.16.0 FATAL_ERROR)

set(CMAKE_SYSTEM_VERSION 10.0 CACHE STRING "" FORCE)

project(MoteurJV C CXX)

################################################################################
# Set target arch type if empty. Visual studio solution generator provides it.
################################################################################
if(NOT CMAKE_VS_PLATFORM_NAME)
    set(CMAKE_VS_PLATFORM_NAME "x64")
endif()
message("${CMAKE_VS_PLATFORM_NAME} architecture in use")

if(NOT ("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32"
     OR "${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64"))
    message(FATAL_ERROR "${CMAKE_VS_PLATFORM_NAME} arch is not supported!")
endif()

################################################################################
# Global configuration types
################################################################################
set(CMAKE_CONFIGURATION_TYPES
    "Debug"
    "Release"
    CACHE STRING "" FORCE
)

################################################################################
# Global compiler options
################################################################################
if(MSVC)
    # remove default flags provided with CMake for MSVC
    set(CMAKE_C_FLAGS "")
    set(CMAKE_C_FLAGS_DEBUG "")
    set(CMAKE_C_FLAGS_RELEASE "")
    set(CMAKE_CXX_FLAGS "")
    set(CMAKE_CXX_FLAGS_DEBUG "")
    set(CMAKE_CXX_FLAGS_RELEASE "")
endif()

################################################################################
# Global linker options
################################################################################
if(MSVC)
    # remove default flags provided with CMake for MSVC
    set(CMAKE_EXE_LINKER_FLAGS "")
    set(CMAKE_MODULE_LINKER_FLAGS "")
    set(CMAKE_SHARED_LINKER_FLAGS "")
    set(CMAKE_STATIC_LINKER_FLAGS "")
    set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS}")
endif()

################################################################################
# Nuget packages function stub.
################################################################################
function(use_package TARGET PACKAGE VERSION)
    message(WARNING "No implementation of use_package. Create yours. "
                    "Package \"${PACKAGE}\" with version \"${VERSION}\" "
                    "for target \"${TARGET}\" is ignored!")
endfunction()

################################################################################
# Common utils
################################################################################
include(CMake/Utils.cmake)

################################################################################
# Additional Global Settings(add specific info there)
################################################################################
include(CMake/GlobalSettingsInclude.cmake OPTIONAL)

################################################################################
# Use solution folders feature
################################################################################
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

################################################################################
# Sub-projects
################################################################################



























set(PROJECT_NAME MoteurJV)

################################################################################
# Source groups
################################################################################
set(no_group_source_files
    "includesUI.h"
)
source_group("" FILES ${no_group_source_files})

set(Headers
    "Simulator.h"
)
source_group("Headers" FILES ${Headers})

set(Headers__Contacts
    "GroundContactGenerator.h"
    "NaiveParticleContactGenerator.h"
    "ParticleCable.h"
    "ParticleContact.h"
    "ParticleContactGenerator.h"
    "ParticleContactRegistry.h"
    "ParticleContactResolver.h"
    "ParticleLink.h"
    "ParticleRod.h"
)
source_group("Headers\\Contacts" FILES ${Headers__Contacts})

set(Headers__Forces
    "ParticleAnchoredSpring.h"
    "ParticleBuoyancy.h"
    "ParticleDrag.h"
    "ParticleForceGenerator.h"
    "ParticleForceRegistry.h"
    "ParticleGravity.h"
    "ParticleSpring.h"
)
source_group("Headers\\Forces" FILES ${Headers__Forces})

set(Headers__Orientations
    "Matrix33.h"
    "Matrix34.h"
    "Quaternion.h"
    "RigidBody.h"
)
source_group("Headers\\Orientations" FILES ${Headers__Orientations})

set(Headers__Positions
    "Particle.h"
    "Vector3.h"
)
source_group("Headers\\Positions" FILES ${Headers__Positions})

set(Sources
    "MoteurJV.cpp"
    "Simulator.cpp"
)
source_group("Sources" FILES ${Sources})

set(Sources__Contacts
    "GroundContactGenerator.cpp"
    "NaiveParticleContactGenerator.cpp"
    "ParticleCable.cpp"
    "ParticleContact.cpp"
    "ParticleContactRegistry.cpp"
    "ParticleContactResolver.cpp"
    "ParticleLink.cpp"
    "ParticleRod.cpp"
)
source_group("Sources\\Contacts" FILES ${Sources__Contacts})

set(Sources__Forces
    "ParticleAnchoredSpring.cpp"
    "ParticleBuoyancy.cpp"
    "ParticleDrag.cpp"
    "ParticleForceRegistry.cpp"
    "ParticleGravity.cpp"
    "ParticleSpring.cpp"
)
source_group("Sources\\Forces" FILES ${Sources__Forces})

set(Sources__Orientations
    "Matrix33.cpp"
    "Matrix34.cpp"
    "Quaternion.cpp"
    "RigidBody.cpp"
)
source_group("Sources\\Orientations" FILES ${Sources__Orientations})

set(Sources__Positions
    "Particle.cpp"
    "Vector3.cpp"
)
source_group("Sources\\Positions" FILES ${Sources__Positions})

set(UserInterface__Headers
    "Camera.h"
    "Formes.h"
    "GUI.h"
    "OpenGL3.h"
    "ReadFile.h"
)
source_group("UserInterface\\Headers" FILES ${UserInterface__Headers})

set(UserInterface__Sources
    "Camera.cpp"
    "Formes.cpp"
    "GUI.cpp"
    "OpenGL3.cpp"
    "ReadFile.cpp"
)
source_group("UserInterface\\Sources" FILES ${UserInterface__Sources})

set(glad
    "glad.c"
    "include/glad/include/glad/glad.h"
    "include/glad/include/KHR/khrplatform.h"
)
source_group("glad" FILES ${glad})

set(imgui
    "include/imgui-1.84.2/backends/imgui_impl_glfw.cpp"
    "include/imgui-1.84.2/backends/imgui_impl_glfw.h"
    "include/imgui-1.84.2/backends/imgui_impl_opengl3.cpp"
    "include/imgui-1.84.2/backends/imgui_impl_opengl3.h"
    "include/imgui-1.84.2/backends/imgui_impl_opengl3_loader.h"
    "include/imgui-1.84.2/imconfig.h"
    "include/imgui-1.84.2/imgui.cpp"
    "include/imgui-1.84.2/imgui.h"
    "include/imgui-1.84.2/imgui_demo.cpp"
    "include/imgui-1.84.2/imgui_draw.cpp"
    "include/imgui-1.84.2/imgui_internal.h"
    "include/imgui-1.84.2/imgui_tables.cpp"
    "include/imgui-1.84.2/imgui_widgets.cpp"
)
source_group("imgui" FILES ${imgui})

set(ALL_FILES
    ${no_group_source_files}
    ${Headers}
    ${Headers__Contacts}
    ${Headers__Forces}
    ${Headers__Orientations}
    ${Headers__Positions}
    ${Sources}
    ${Sources__Contacts}
    ${Sources__Forces}
    ${Sources__Orientations}
    ${Sources__Positions}
    ${UserInterface__Headers}
    ${UserInterface__Sources}
    ${glad}
    ${imgui}
)

################################################################################
# Target
################################################################################
add_executable(${PROJECT_NAME} ${ALL_FILES})

use_props(${PROJECT_NAME} "${CMAKE_CONFIGURATION_TYPES}" "${DEFAULT_CXX_PROPS}")
set(ROOT_NAMESPACE MoteurJV)

set_target_properties(${PROJECT_NAME} PROPERTIES
    VS_GLOBAL_KEYWORD "Win32Proj"
)
################################################################################
# Output directory
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        OUTPUT_DIRECTORY_DEBUG   "${CMAKE_CURRENT_SOURCE_DIR}//build/$<CONFIG>/"
        OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}//build/$<CONFIG>/"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        OUTPUT_DIRECTORY_DEBUG   "${CMAKE_CURRENT_SOURCE_DIR}//build/$<CONFIG>/"
        OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}//build/$<CONFIG>/"
    )
endif()
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        INTERPROCEDURAL_OPTIMIZATION_RELEASE "TRUE"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        INTERPROCEDURAL_OPTIMIZATION_DEBUG   "FALSE"
        INTERPROCEDURAL_OPTIMIZATION_RELEASE "TRUE"
    )
endif()
################################################################################
# Include directories
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32")
    target_include_directories(${PROJECT_NAME} PUBLIC
        "${CMAKE_CURRENT_SOURCE_DIR}/include/glad/include;"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/glm-0.9.9.8;"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/imgui-1.84.2;"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/imgui-1.84.2/backends;"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/imgui-1.84.2/examples/libs/glfw/include"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    target_include_directories(${PROJECT_NAME} PUBLIC
        "${CMAKE_CURRENT_SOURCE_DIR}/include/glad/include;"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/glm-0.9.9.8;"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/imgui-1.84.2;"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/imgui-1.84.2/backends;"
        "${CMAKE_CURRENT_SOURCE_DIR}/include/imgui-1.84.2/examples/libs/glfw/include"
    )
endif()

################################################################################
# Compile definitions
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32")
    target_compile_definitions(${PROJECT_NAME} PRIVATE
        "_MBCS"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    target_compile_definitions(${PROJECT_NAME} PRIVATE
        "_MBCS"
    )
endif()

################################################################################
# Compile and link options
################################################################################
if(MSVC)
    if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32")
        target_compile_options(${PROJECT_NAME} PRIVATE
            $<$<CONFIG:Release>:
                /Oi;
                /Gy
            >
            /sdl;
            /W4;
            ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT};
            ${DEFAULT_CXX_EXCEPTION_HANDLING}
        )
    elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
        target_compile_options(${PROJECT_NAME} PRIVATE
            $<$<CONFIG:Debug>:
                /Od;
                /Oi-
            >
            $<$<CONFIG:Release>:
                /Oi;
                /Gy
            >
            /sdl;
            /W4;
            ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT};
            ${DEFAULT_CXX_EXCEPTION_HANDLING}
        )
    endif()
    if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32")
        target_link_options(${PROJECT_NAME} PRIVATE
            $<$<CONFIG:Debug>:
                /NODEFAULTLIB:msvcrt.lib;
                /INCREMENTAL
            >
            $<$<CONFIG:Release>:
                /OPT:REF;
                /OPT:ICF
            >
            /DEBUG;
            /SUBSYSTEM:CONSOLE
        )
    elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
        target_link_options(${PROJECT_NAME} PRIVATE
            $<$<CONFIG:Debug>:
                /NODEFAULTLIB:msvcrt.lib;
                /INCREMENTAL
            >
            $<$<CONFIG:Release>:
                /OPT:REF;
                /OPT:ICF
            >
            /DEBUG;
            /SUBSYSTEM:CONSOLE
        )
    endif()
endif()

################################################################################
# Dependencies
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32")
    set(ADDITIONAL_LIBRARY_DEPENDENCIES
        "opengl32;"
        "glfw3"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    set(ADDITIONAL_LIBRARY_DEPENDENCIES
        "opengl32;"
        "glfw3"
    )
endif()
target_link_libraries(${PROJECT_NAME} PRIVATE "${ADDITIONAL_LIBRARY_DEPENDENCIES}")

if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "Win32")
    target_link_directories(${PROJECT_NAME} PRIVATE
        "${CMAKE_CURRENT_SOURCE_DIR}/include/imgui-1.84.2/examples/libs/glfw/lib-vc2010-32"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    target_link_directories(${PROJECT_NAME} PRIVATE
        "${CMAKE_CURRENT_SOURCE_DIR}/include/imgui-1.84.2/examples/libs/glfw/lib-vc2010-64"
    )
endif()

